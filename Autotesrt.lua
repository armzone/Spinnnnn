movementSpeed = math.floor((relativeX * 10 + 3) * 10) / 10 -- ‡∏ä‡πà‡∏ß‡∏á 3.0-13.0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        sliderFill.Size = UDim2.new(relativeX, 0, 1, 0)
        speedLabel.Text = string.format("‚ö° ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: %.1f (Ultra Safe)", movementSpeed)
    end-- ========================================
-- Perfect AutoFarm Navigation System
-- ‡πÉ‡∏ä‡πâ CFrame Movement + Advanced Pathfinding
-- ========================================

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local PathfindingService = game:GetService("PathfindingService")
local RunService = game:GetService("RunService")
local Debris = game:GetService("Debris")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local rootPart = char:WaitForChild("HumanoidRootPart")
local humanoid = char:WaitForChild("Humanoid")

-- ========================================
-- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
-- ========================================

-- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏´‡∏•‡∏±‡∏Å
local moving = false
local isEnabled = false
local navigationMode = "PathOnly" -- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô PathOnly ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
local movementSpeed = 6 -- ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î

-- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
local settings = {
    -- ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
    smoothMovement = true,
    useTweening = true, -- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ Tween
    useHumanoidMovement = true, -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Humanoid Movement
    adaptiveSpeed = true,
    obstacleDetection = true,
    safeMovement = true, -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    collisionCheck = true, -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Collision
    
    -- Pathfinding
    useSmartPathing = true,
    pathOptimization = true,
    dynamicRecalculation = true,
    multiLayerNavigation = true,
    
    -- ‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á
    playerAvoidance = true,
    obstacleAvoidance = true,
    stuckDetection = true,
    groundCheck = true, -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô
    
    -- ‡∏†‡∏≤‡∏û‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    showPath = true,
    showDebugInfo = true,
    beamDuration = 30
}

-- ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
local targetPositions = {
    Vector3.new(1224.875, 255.1919708251953, -559.2366943359375),
    -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
}
local currentTargetIndex = 1
local customTargets = {} -- ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏á

-- ========================================
-- ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Character
-- ========================================

local function IsCharacterValid()
    return char and char.Parent and rootPart and rootPart.Parent and humanoid and humanoid.Health > 0
end

local function OnCharacterAdded(newChar)
    char = newChar
    rootPart = char:WaitForChild("HumanoidRootPart")
    humanoid = char:WaitForChild("Humanoid")
    moving = false
    print("üîÑ Character ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö")
end

player.CharacterAdded:Connect(OnCharacterAdded)

-- ========================================
-- ‡∏£‡∏∞‡∏ö‡∏ö Visual ‡πÅ‡∏•‡∏∞ Debug
-- ========================================

local activeBeams = {}
local debugGui = nil

local function ClearAllBeams()
    for _, beam in pairs(activeBeams) do
        if beam and beam.Parent then
            beam:Destroy()
        end
    end
    activeBeams = {}
end

local function CreateBeam(fromPos, toPos, color, width, transparency)
    if not Workspace.Terrain or not settings.showPath then return end
    
    local att0 = Instance.new("Attachment")
    att0.Parent = Workspace.Terrain
    att0.WorldPosition = fromPos
    
    local att1 = Instance.new("Attachment")
    att1.Parent = Workspace.Terrain
    att1.WorldPosition = toPos
    
    local beam = Instance.new("Beam")
    beam.Attachment0 = att0
    beam.Attachment1 = att1
    beam.Width0 = width or 0.5
    beam.Width1 = width or 0.5
    beam.Color = ColorSequence.new(color or Color3.new(0, 1, 0))
    beam.FaceCamera = true
    beam.Transparency = NumberSequence.new(transparency or 0.3)
    beam.LightEmission = 0.8
    beam.Parent = att0
    
    table.insert(activeBeams, att0)
    table.insert(activeBeams, att1)
    
    Debris:AddItem(att0, settings.beamDuration)
    Debris:AddItem(att1, settings.beamDuration)
    
    return beam
end

local function CreateDebugInfo()
    if not settings.showDebugInfo or debugGui then return end
    
    debugGui = Instance.new("ScreenGui")
    debugGui.Name = "NavigationDebug"
    debugGui.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 300, 0, 150)
    frame.Position = UDim2.new(1, -320, 0, 20)
    frame.BackgroundColor3 = Color3.new(0, 0, 0)
    frame.BackgroundTransparency = 0.3
    frame.BorderSizePixel = 0
    frame.Parent = debugGui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = frame
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 30)
    title.BackgroundTransparency = 1
    title.Text = "üîç Navigation Debug"
    title.TextColor3 = Color3.new(1, 1, 1)
    title.TextScaled = true
    title.Font = Enum.Font.GothamBold
    title.Parent = frame
    
    local infoLabel = Instance.new("TextLabel")
    infoLabel.Name = "InfoLabel"
    infoLabel.Size = UDim2.new(1, -10, 1, -35)
    infoLabel.Position = UDim2.new(0, 5, 0, 30)
    infoLabel.BackgroundTransparency = 1
    infoLabel.Text = "Initializing..."
    infoLabel.TextColor3 = Color3.new(0.9, 0.9, 0.9)
    infoLabel.TextSize = 12
    infoLabel.Font = Enum.Font.Code
    infoLabel.TextXAlignment = Enum.TextXAlignment.Left
    infoLabel.TextYAlignment = Enum.TextYAlignment.Top
    infoLabel.TextWrapped = true
    infoLabel.Parent = frame
    
    return infoLabel
end

local function UpdateDebugInfo(text)
    if debugGui and debugGui:FindFirstChild("Frame") and debugGui.Frame:FindFirstChild("InfoLabel") then
        debugGui.Frame.InfoLabel.Text = text
    end
end

-- ========================================
-- ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
-- ========================================

local function FindGroundPosition(position)
    if not settings.groundCheck then return position end
    
    -- ‡∏¢‡∏¥‡∏á Raycast ‡∏•‡∏á‡πÑ‡∏õ‡∏´‡∏≤‡∏û‡∏∑‡πâ‡∏ô
    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    raycastParams.FilterDescendantsInstances = {char}
    
    -- ‡∏¢‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏π‡∏á‡πÑ‡∏õ‡∏ï‡πà‡∏≥
    local startPos = position + Vector3.new(0, 50, 0)
    local direction = Vector3.new(0, -100, 0)
    
    local raycastResult = Workspace:Raycast(startPos, direction, raycastParams)
    
    if raycastResult then
        -- ‡∏û‡∏ö‡∏û‡∏∑‡πâ‡∏ô - ‡∏ß‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏û‡∏∑‡πâ‡∏ô 3 ‡∏´‡∏ô‡πà‡∏ß‡∏¢
        return raycastResult.Position + Vector3.new(0, 3, 0)
    else
        -- ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏∑‡πâ‡∏ô - ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
        return position
    end
end

local function IsSafePosition(position)
    if not settings.safeMovement then return true end
    
    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    local groundPos = FindGroundPosition(position)
    local heightDiff = math.abs(position.Y - groundPos.Y)
    
    -- ‡∏ñ‡πâ‡∏≤‡∏™‡∏π‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    return heightDiff <= 20
end

-- ========================================
-- ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á
-- ========================================

local function RaycastCheck(from, to, filterList)
    local direction = to - from
    local distance = direction.Magnitude
    
    if distance < 0.1 then return false end
    
    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    raycastParams.FilterDescendantsInstances = filterList or {char}
    raycastParams.IgnoreWater = true -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡∏Å‡πÄ‡∏â‡∏¢‡∏ô‡πâ‡∏≥
    
    local raycastResult = Workspace:Raycast(from, direction, raycastParams)
    return raycastResult ~= nil
end

local function CheckCollisionPath(startPos, endPos)
    if not settings.collisionCheck then return true end
    
    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö collision ‡πÉ‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö
    local checkPoints = {
        Vector3.new(0, 0, 0),    -- ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏ó‡πâ‡∏≤
        Vector3.new(0, 2, 0),    -- ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á‡∏ï‡∏±‡∏ß
        Vector3.new(0, 4, 0),    -- ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏´‡∏±‡∏ß
    }
    
    for _, offset in ipairs(checkPoints) do
        local from = startPos + offset
        local to = endPos + offset
        
        if RaycastCheck(from, to) then
            return false -- ‡∏û‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á
        end
    end
    
    return true -- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á
end

local function IsPathClear(startPos, endPos)
    if not settings.obstacleDetection then return true end
    
    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
    local positions = {
        startPos,
        startPos + Vector3.new(0, 2, 0),
        startPos + Vector3.new(0, 4, 0)
    }
    
    for _, pos in ipairs(positions) do
        local targetPos = Vector3.new(endPos.X, pos.Y, endPos.Z)
        if not RaycastCheck(pos, targetPos) then
            return true -- ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        end
    end
    
    return false
end

local function DetectNearbyPlayers(position, radius)
    if not settings.playerAvoidance then return {} end
    
    local nearbyPlayers = {}
    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (otherPlayer.Character.HumanoidRootPart.Position - position).Magnitude
            if distance < radius then
                table.insert(nearbyPlayers, otherPlayer.Character.HumanoidRootPart.Position)
            end
        end
    end
    return nearbyPlayers
end

-- ========================================
-- ‡∏£‡∏∞‡∏ö‡∏ö CFrame Movement ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
-- ========================================

local function SmoothCFrameMovement(startCFrame, endPosition, speed, callback)
    if not IsCharacterValid() then return false end
    
    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    endPosition = FindGroundPosition(endPosition)
    
    if not IsSafePosition(endPosition) then
        warn("‚ö†Ô∏è ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ - ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
        if callback then callback(false) end
        return false
    end
    
    local startPos = startCFrame.Position
    
    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Collision ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    if not CheckCollisionPath(startPos, endPosition) then
        warn("‚ö†Ô∏è ‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏ö‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á - ‡πÉ‡∏ä‡πâ Humanoid ‡πÅ‡∏ó‡∏ô")
        return HumanoidMovement(endPosition, callback)
    end
    
    local direction = (endPosition - startPos)
    local distance = direction.Magnitude
    
    if distance < 2 then
        if callback then callback(true) end
        return true
    end
    
    -- ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    local safeSpeed = math.min(speed, 8) -- ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 8 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    local startTime = tick()
    local duration = distance / safeSpeed
    
    if settings.useTweening and duration > 0.3 then
        -- ‡πÉ‡∏ä‡πâ TweenService ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        local targetCFrame = CFrame.lookAt(endPosition, endPosition + direction.Unit)
        local tweenInfo = TweenInfo.new(
            duration,
            Enum.EasingStyle.Sine, -- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Sine ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
            Enum.EasingDirection.InOut,
            0,
            false,
            0
        )
        
        local tween = TweenService:Create(rootPart, tweenInfo, {CFrame = targetCFrame})
        tween:Play()
        
        tween.Completed:Connect(function()
            if callback then callback(true) end
        end)
        
        return true
    else
        -- ‡πÉ‡∏ä‡πâ RunService ‡πÅ‡∏ï‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤
        local connection
        local completed = false
        local maxStepSize = 0.8 -- ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≠ frame
        
        connection = RunService.Heartbeat:Connect(function(dt)
            if not IsCharacterValid() or completed then
                connection:Disconnect()
                return
            end
            
            local currentTime = tick()
            local elapsed = currentTime - startTime
            local progress = math.min(elapsed / duration, 1)
            
            -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
            if dt > 0 then
                local frameDistance = safeSpeed * dt
                frameDistance = math.min(frameDistance, maxStepSize)
                
                -- Smooth interpolation
                local currentPos = startPos:Lerp(endPosition, progress)
                
                -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö collision ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
                if not CheckCollisionPath(rootPart.Position, currentPos) then
                    completed = true
                    connection:Disconnect()
                    warn("‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà")
                    if callback then callback(false) end
                    return
                end
                
                -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏Ç‡∏ì‡∏∞‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
                currentPos = FindGroundPosition(currentPos)
                
                -- ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á
                local lookDirection = (endPosition - currentPos).Unit
                if lookDirection.Magnitude > 0 then
                    rootPart.CFrame = CFrame.lookAt(currentPos, currentPos + lookDirection)
                else
                    rootPart.CFrame = CFrame.new(currentPos)
                end
                
                -- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Humanoid WalkSpeed ‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Animation conflict
                if humanoid then
                    humanoid.WalkSpeed = 0
                end
            end
            
            if progress >= 1 then
                completed = true
                connection:Disconnect()
                
                -- ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ WalkSpeed
                if humanoid then
                    humanoid.WalkSpeed = 16
                end
                
                if callback then callback(true) end
            end
        end)
        
        return true
    end
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ä‡πâ Humanoid Movement ‡πÅ‡∏ó‡∏ô CFrame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
local function HumanoidMovement(targetPosition, callback)
    if not IsCharacterValid() then
        if callback then callback(false) end
        return false
    end
    
    print("üö∂ ‡πÉ‡∏ä‡πâ Humanoid Movement ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")
    
    -- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    humanoid.WalkSpeed = math.min(movementSpeed, 16)
    
    -- ‡πÉ‡∏ä‡πâ MoveTo ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
    humanoid:MoveTo(targetPosition)
    
    -- ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢
    local startTime = tick()
    local timeout = 30
    local success = false
    
    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not IsCharacterValid() then
            connection:Disconnect()
            if callback then callback(false) end
            return
        end
        
        local distance = (rootPart.Position - targetPosition).Magnitude
        
        if distance < 4 then
            success = true
            connection:Disconnect()
            if callback then callback(true) end
            return
        end
        
        if tick() - startTime > timeout then
            connection:Disconnect()
            if callback then callback(false) end
            return
        end
    end)
    
    return true
end

local function TeleportMovement(targetPosition)
    -- ‡∏£‡∏∞‡∏ö‡∏ö Teleport ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    return false
end

-- ========================================
-- ‡∏£‡∏∞‡∏ö‡∏ö Pathfinding ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
-- ========================================

local function CreateAdvancedPath(startPos, endPos)
    local pathfindingParams = {
        AgentRadius = 2,
        AgentHeight = 5,
        AgentCanJump = true,
        AgentJumpHeight = 50,
        AgentCanClimb = true,
        AgentMaxSlope = 89,
        WaypointSpacing = 8,
        Costs = {
            Water = 20,
            Grass = 1,
            Sand = 2,
            Rock = 5,
            Wood = 3,
            Metal = 10,
            Ice = 15,
            Lava = math.huge,
            DangerousArea = math.huge
        }
    }
    
    local success, path = pcall(function()
        return PathfindingService:CreatePath(pathfindingParams)
    end)
    
    if not success then
        warn("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Path ‡πÑ‡∏î‡πâ:", path)
        return nil
    end
    
    local computeSuccess, err = pcall(function()
        path:ComputeAsync(startPos, endPos)
    end)
    
    if not computeSuccess then
        warn("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Path ‡πÑ‡∏î‡πâ:", err)
        return nil
    end
    
    return path
end

local function OptimizePath(waypoints)
    if not settings.pathOptimization or #waypoints < 3 then
        return waypoints
    end
    
    local optimized = {waypoints[1]}
    
    for i = 2, #waypoints - 1 do
        local prevPoint = optimized[#optimized].Position -- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á .Position
        local currentPoint = waypoints[i].Position -- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á .Position
        local nextPoint = waypoints[i + 1].Position -- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á .Position
        
        -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡πâ‡∏≤‡∏°‡∏à‡∏∏‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if IsPathClear(prevPoint, nextPoint) then
            -- ‡∏Ç‡πâ‡∏≤‡∏°‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ
            continue
        else
            table.insert(optimized, waypoints[i])
        end
    end
    
    table.insert(optimized, waypoints[#waypoints])
    
    print(string.format("üîß ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á: %d -> %d waypoints", #waypoints, #optimized))
    return optimized
end

local function NavigateToPosition(targetPos, options)
    if not targetPos or not IsCharacterValid() then return false end
    
    options = options or {}
    local usePathfinding = options.usePathfinding ~= false
    local maxRetries = options.maxRetries or 3
    
    moving = true
    local startPos = rootPart.Position
    local distance = (targetPos - startPos).Magnitude
    
    -- ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Debug
    UpdateDebugInfo(string.format(
        "üéØ Target: %s\nüìè Distance: %.1f\nüöÄ Mode: %s\n‚ö° Speed: %.1f",
        tostring(targetPos), distance, navigationMode, movementSpeed
    ))
    
    if navigationMode == "CFrame" then
        -- CFrame Movement ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÅ‡∏ï‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô)
        print("üéØ ‡πÉ‡∏ä‡πâ CFrame Movement (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)")
        CreateBeam(startPos, targetPos, Color3.new(0, 1, 1), 0.8) -- ‡∏™‡∏µ‡∏ü‡πâ‡∏≤
        
        local success = false
        SmoothCFrameMovement(rootPart.CFrame, targetPos, movementSpeed, function(result)
            success = result
        end)
        
        -- ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à
        local startTime = tick()
        while moving and IsCharacterValid() and not success do
            task.wait(0.1)
            if (rootPart.Position - targetPos).Magnitude < 3 then
                success = true
                break
            end
            if tick() - startTime > 30 then -- timeout
                break
            end
        end
        
        moving = false
        return success
        
    else
        -- ‡πÉ‡∏ä‡πâ Pathfinding + Humanoid Movement ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
        print("üß≠ ‡πÉ‡∏ä‡πâ Pathfinding + Humanoid Movement")
        
        local path = CreateAdvancedPath(startPos, targetPos)
        if not path or path.Status ~= Enum.PathStatus.Success then
            warn("‚ùå Pathfinding ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
            
            if navigationMode == "Hybrid" then
                -- Fallback ‡πÑ‡∏õ CFrame
                return NavigateToPosition(targetPos, {usePathfinding = false})
            else
                moving = false
                return false
            end
        end
        
        local waypoints = path:GetWaypoints()
        waypoints = OptimizePath(waypoints)
        
        print(string.format("üü¢ ‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á: %d waypoints", #waypoints))
        
        -- ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
        for i = 1, #waypoints - 1 do
            local currentWp = waypoints[i]
            local nextWp = waypoints[i + 1]
            local color
            
            if currentWp.Action == Enum.PathWaypointAction.Jump then
                color = Color3.new(1, 1, 0) -- ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
            elseif currentWp.Action == Enum.PathWaypointAction.Custom then
                color = Color3.new(1, 0.5, 0) -- ‡∏™‡πâ‡∏°
            else
                color = Color3.new(0, 1, 0) -- ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            end
            
            CreateBeam(currentWp.Position, nextWp.Position, color, 0.6)
        end
        
        -- ‡πÉ‡∏ä‡πâ Humanoid Movement ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
        for i, wp in ipairs(waypoints) do
            if not IsCharacterValid() or not isEnabled then
                moving = false
                return false
            end
            
            print(string.format("üìç Waypoint %d/%d: %s", i, #waypoints, wp.Action.Name))
            
            local targetPosition = wp.Position
            
            -- ‡πÉ‡∏ä‡πâ Humanoid Movement ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            if settings.useHumanoidMovement then
                local waypointSuccess = false
                HumanoidMovement(targetPosition, function(result)
                    waypointSuccess = result
                end)
                
                -- ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
                local startTime = tick()
                while not waypointSuccess and IsCharacterValid() and isEnabled do
                    task.wait(0.1)
                    if tick() - startTime > 15 then -- Timeout
                        print("‚è∞ Timeout - ‡∏Ç‡πâ‡∏≤‡∏° waypoint")
                        break
                    end
                end
            else
                -- ‡πÉ‡∏ä‡πâ CFrame ‡πÅ‡∏ï‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                local waypointSuccess = false
                SmoothCFrameMovement(rootPart.CFrame, targetPosition, movementSpeed, function(result)
                    waypointSuccess = result
                end)
                
                local startTime = tick()
                while not waypointSuccess and IsCharacterValid() and isEnabled do
                    task.wait(0.1)
                    if tick() - startTime > 15 then
                        break
                    end
                end
            end
        end
        
        moving = false
        return true
    end
    
    moving = false
    return false
end

-- ========================================
-- ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
-- ========================================

local function GetNextTarget()
    local allTargets = {}
    
    -- ‡∏£‡∏ß‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    for _, pos in ipairs(targetPositions) do
        table.insert(allTargets, pos)
    end
    for _, pos in ipairs(customTargets) do
        table.insert(allTargets, pos)
    end
    
    if #allTargets == 0 then return nil end
    
    local target = allTargets[currentTargetIndex]
    currentTargetIndex = currentTargetIndex + 1
    if currentTargetIndex > #allTargets then
        currentTargetIndex = 1
    end
    
    return target
end

local function AddCustomTarget(position)
    table.insert(customTargets, position)
    print("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà: " .. tostring(position))
end

-- ========================================
-- ‡∏£‡∏∞‡∏ö‡∏ö AutoFarm ‡∏´‡∏•‡∏±‡∏Å
-- ========================================

local function AutoFarmLoop()
    print("ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö AutoFarm")
    
    while isEnabled do
        if not IsCharacterValid() then
            print("‚è≥ ‡∏£‡∏≠ Character ‡πÇ‡∏´‡∏•‡∏î...")
            task.wait(2)
            continue
        end
        
        if moving then
            task.wait(1)
            continue
        end
        
        local targetPos = GetNextTarget()
        if not targetPos then
            warn("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢")
            break
        end
        
        local success = NavigateToPosition(targetPos)
        
        if success then
            print("‚úÖ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß - ‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            task.wait(3)
        else
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ - ‡∏û‡∏±‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            task.wait(5)
        end
        
        task.wait(1) -- ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô lag
    end
end

-- ========================================
-- ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° UI
-- ========================================

local function CreateAdvancedGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PerfectAutoFarmGUI"
    screenGui.Parent = player:WaitForChild("PlayerGui")
    screenGui.ResetOnSpawn = false
    
    -- Main Frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 320, 0, 400)
    mainFrame.Position = UDim2.new(0, 20, 0, 20)
    mainFrame.BackgroundColor3 = Color3.new(0, 0, 0)
    mainFrame.BackgroundTransparency = 0.1
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = mainFrame
    
    -- Title
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 40)
    title.BackgroundTransparency = 1
    title.Text = "üöÄ Perfect AutoFarm"
    title.TextColor3 = Color3.new(1, 1, 1)
    title.TextScaled = true
    title.Font = Enum.Font.GothamBold
    title.Parent = mainFrame
    
    local yOffset = 50
    
    -- Status
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Size = UDim2.new(1, -20, 0, 25)
    statusLabel.Position = UDim2.new(0, 10, 0, yOffset)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = "üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏õ‡∏¥‡∏î"
    statusLabel.TextColor3 = Color3.new(0.9, 0.9, 0.9)
    statusLabel.TextScaled = true
    statusLabel.Font = Enum.Font.Gotham
    statusLabel.TextXAlignment = Enum.TextXAlignment.Left
    statusLabel.Parent = mainFrame
    yOffset = yOffset + 30
    
    -- Mode Selection
    local modeLabel = Instance.new("TextLabel")
    modeLabel.Size = UDim2.new(1, -20, 0, 20)
    modeLabel.Position = UDim2.new(0, 10, 0, yOffset)
    modeLabel.BackgroundTransparency = 1
    modeLabel.Text = "üß≠ ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô:"
    modeLabel.TextColor3 = Color3.new(0.9, 0.9, 0.9)
    modeLabel.TextScaled = true
    modeLabel.Font = Enum.Font.Gotham
    modeLabel.TextXAlignment = Enum.TextXAlignment.Left
    modeLabel.Parent = mainFrame
    yOffset = yOffset + 25
    
    local modes = {"CFrame", "PathOnly", "Hybrid"}
    for i, mode in ipairs(modes) do
        local modeBtn = Instance.new("TextButton")
        modeBtn.Size = UDim2.new(0, 90, 0, 25)
        modeBtn.Position = UDim2.new(0, 10 + (i-1) * 95, 0, yOffset)
        modeBtn.BackgroundColor3 = navigationMode == mode and Color3.new(0, 0.8, 0) or Color3.new(0.3, 0.3, 0.3)
        modeBtn.Text = mode
        modeBtn.TextColor3 = Color3.new(1, 1, 1)
        modeBtn.TextScaled = true
        modeBtn.Font = Enum.Font.Gotham
        modeBtn.BorderSizePixel = 0
        modeBtn.Parent = mainFrame
        
        local btnCorner = Instance.new("UICorner")
        btnCorner.CornerRadius = UDim.new(0, 4)
        btnCorner.Parent = modeBtn
        
        modeBtn.MouseButton1Click:Connect(function()
            navigationMode = mode
            -- ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏µ‡∏õ‡∏∏‡πà‡∏°
            for _, btn in pairs(mainFrame:GetChildren()) do
                if btn:IsA("TextButton") and table.find(modes, btn.Text) then
                    btn.BackgroundColor3 = btn.Text == mode and Color3.new(0, 0.8, 0) or Color3.new(0.3, 0.3, 0.3)
                end
            end
            print("üìù ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô: " .. mode)
        end)
    end
    yOffset = yOffset + 35
    
    -- Speed Control
    local speedLabel = Instance.new("TextLabel")
    speedLabel.Size = UDim2.new(1, -20, 0, 20)
    speedLabel.Position = UDim2.new(0, 10, 0, yOffset)
    speedLabel.BackgroundTransparency = 1
    speedLabel.Text = string.format("‚ö° ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: %.1f (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)", movementSpeed)
    speedLabel.TextColor3 = Color3.new(0.9, 0.9, 0.9)
    speedLabel.TextScaled = true
    speedLabel.Font = Enum.Font.Gotham
    speedLabel.TextXAlignment = Enum.TextXAlignment.Left
    speedLabel.Parent = mainFrame
    yOffset = yOffset + 25
    
    -- Speed Slider
    local sliderBg = Instance.new("Frame")
    sliderBg.Size = UDim2.new(1, -40, 0, 8)
    sliderBg.Position = UDim2.new(0, 20, 0, yOffset)
    sliderBg.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3)
    sliderBg.BorderSizePixel = 0
    sliderBg.Parent = mainFrame
    
    local sliderCorner = Instance.new("UICorner")
    sliderCorner.CornerRadius = UDim.new(0, 4)
    sliderCorner.Parent = sliderBg
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Size = UDim2.new((movementSpeed - 3) / 10, 0, 1, 0) -- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà
    sliderFill.BackgroundColor3 = Color3.new(0, 0.8, 1)
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderBg
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(0, 4)
    fillCorner.Parent = sliderFill
    
    -- Slider interaction
    local dragging = false
    local function updateSpeed(input)
        local relativeX = math.clamp((input.Position.X - sliderBg.AbsolutePosition.X) / sliderBg.AbsoluteSize.X, 0, 1)
        movementSpeed = math.floor((relativeX * 15 + 5) * 10) / 10 -- ‡∏ä‡πà‡∏ß‡∏á 5-20 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢, ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏© 1 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        sliderFill.Size = UDim2.new(relativeX, 0, 1, 0)
        speedLabel.Text = string.format("‚ö° ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: %.1f (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)", movementSpeed)
    end
    
    sliderBg.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            updateSpeed(input)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSpeed(input)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    yOffset = yOffset + 20
    
    -- Settings Toggles
    local settingsToggles = {
        {key = "useHumanoidMovement", label = "üö∂ ‡πÉ‡∏ä‡πâ Humanoid Movement"},
        {key = "useTweening", label = "‚ú® ‡πÉ‡∏ä‡πâ Tween (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)"},
        {key = "collisionCheck", label = "üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Collision"},
        {key = "safeMovement", label = "üõ°Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"},
        {key = "groundCheck", label = "üåç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô"},
        {key = "obstacleDetection", label = "üöß ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á"},
        {key = "showPath", label = "üåà ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á"},
        {key = "showDebugInfo", label = "üîç ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Debug"}
    }
    
    for i, setting in ipairs(settingsToggles) do
        local toggleBtn = Instance.new("TextButton")
        toggleBtn.Size = UDim2.new(1, -20, 0, 25)
        toggleBtn.Position = UDim2.new(0, 10, 0, yOffset)
        toggleBtn.BackgroundColor3 = settings[setting.key] and Color3.new(0, 0.6, 0) or Color3.new(0.6, 0, 0)
        toggleBtn.Text = setting.label .. (settings[setting.key] and " ‚úÖ" or " ‚ùå")
        toggleBtn.TextColor3 = Color3.new(1, 1, 1)
        toggleBtn.TextSize = 12
        toggleBtn.Font = Enum.Font.Gotham
        toggleBtn.BorderSizePixel = 0
        toggleBtn.Parent = mainFrame
        
        local toggleCorner = Instance.new("UICorner")
        toggleCorner.CornerRadius = UDim.new(0, 4)
        toggleCorner.Parent = toggleBtn
        
        toggleBtn.MouseButton1Click:Connect(function()
            settings[setting.key] = not settings[setting.key]
            toggleBtn.BackgroundColor3 = settings[setting.key] and Color3.new(0, 0.6, 0) or Color3.new(0.6, 0, 0)
            toggleBtn.Text = setting.label .. (settings[setting.key] and " ‚úÖ" or " ‚ùå")
            
            -- Handle special cases
            if setting.key == "showDebugInfo" then
                if settings[setting.key] then
                    CreateDebugInfo()
                elseif debugGui then
                    debugGui:Destroy()
                    debugGui = nil
                end
            elseif setting.key == "showPath" and not settings[setting.key] then
                ClearAllBeams()
            end
        end)
        
        yOffset = yOffset + 30
    end
    
    -- Control Buttons
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(1, -20, 0, 40)
    toggleButton.Position = UDim2.new(0, 10, 0, yOffset)
    toggleButton.BackgroundColor3 = Color3.new(0, 0.8, 0)
    toggleButton.Text = "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö AutoFarm"
    toggleButton.TextColor3 = Color3.new(1, 1, 1)
    toggleButton.TextScaled = true
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.BorderSizePixel = 0
    toggleButton.Parent = mainFrame
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 8)
    toggleCorner.Parent = toggleButton
    
    yOffset = yOffset + 50
    
    -- Add Target Button
    local addTargetBtn = Instance.new("TextButton")
    addTargetBtn.Size = UDim2.new(1, -20, 0, 30)
    addTargetBtn.Position = UDim2.new(0, 10, 0, yOffset)
    addTargetBtn.BackgroundColor3 = Color3.new(0, 0.4, 0.8)
    addTargetBtn.Text = "üìç ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"
    addTargetBtn.TextColor3 = Color3.new(1, 1, 1)
    addTargetBtn.TextScaled = true
    addTargetBtn.Font = Enum.Font.Gotham
    addTargetBtn.BorderSizePixel = 0
    addTargetBtn.Parent = mainFrame
    
    local addCorner = Instance.new("UICorner")
    addCorner.CornerRadius = UDim.new(0, 6)
    addCorner.Parent = addTargetBtn
    
    -- Update UI function
    local function UpdateUI()
        statusLabel.Text = string.format("üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: %s %s | ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: %d/%d", 
            isEnabled and "üü¢ ‡πÄ‡∏õ‡∏¥‡∏î" or "üî¥ ‡∏õ‡∏¥‡∏î",
            moving and "(‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô)" or "",
            currentTargetIndex,
            #targetPositions + #customTargets
        )
        
        if isEnabled then
            toggleButton.BackgroundColor3 = Color3.new(0.8, 0, 0)
            toggleButton.Text = "‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö AutoFarm"
        else
            toggleButton.BackgroundColor3 = Color3.new(0, 0.8, 0)
            toggleButton.Text = "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö AutoFarm"
        end
    end
    
    -- Button Events
    toggleButton.MouseButton1Click:Connect(function()
        isEnabled = not isEnabled
        if isEnabled then
            task.spawn(AutoFarmLoop)
        else
            moving = false
            ClearAllBeams()
        end
        UpdateUI()
    end)
    
    addTargetBtn.MouseButton1Click:Connect(function()
        if IsCharacterValid() then
            AddCustomTarget(rootPart.Position)
            UpdateUI()
        end
    end)
    
    -- Auto update
    task.spawn(function()
        while screenGui.Parent do
            UpdateUI()
            task.wait(1)
        end
    end)
    
    -- Minimize feature
    local isMinimized = false
    title.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local currentTime = tick()
            if title:GetAttribute("LastClick") and (currentTime - title:GetAttribute("LastClick")) < 0.5 then
                isMinimized = not isMinimized
                if isMinimized then
                    mainFrame:TweenSize(UDim2.new(0, 320, 0, 45), "Out", "Quad", 0.3, true)
                    title.Text = "üöÄ Perfect AutoFarm (‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏¢‡∏≤‡∏¢)"
                else
                    mainFrame:TweenSize(UDim2.new(0, 320, 0, 400), "Out", "Quad", 0.3, true)
                    title.Text = "üöÄ Perfect AutoFarm"
                end
            end
            title:SetAttribute("LastClick", currentTime)
        end
    end)
    
    UpdateUI()
    print("üéÆ ‡∏™‡∏£‡πâ‡∏≤‡∏á Perfect AutoFarm GUI ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
end

-- ========================================
-- ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏Ç‡∏±‡∏î
-- ========================================

local stuckDetection = {
    lastPosition = nil,
    stuckTime = 0,
    stuckThreshold = 5, -- ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    minMovement = 2 -- ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
}

local function CheckStuckStatus()
    if not IsCharacterValid() or not moving then return false end
    
    local currentPos = rootPart.Position
    
    if stuckDetection.lastPosition then
        local movement = (currentPos - stuckDetection.lastPosition).Magnitude
        
        if movement < stuckDetection.minMovement then
            stuckDetection.stuckTime = stuckDetection.stuckTime + 1
        else
            stuckDetection.stuckTime = 0
        end
        
        if stuckDetection.stuckTime >= stuckDetection.stuckThreshold then
            print("‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏Ç‡∏±‡∏î - ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
            
            -- ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏Ç‡∏±‡∏î
            local escapePos = currentPos + Vector3.new(
                math.random(-10, 10),
                5,
                math.random(-10, 10)
            )
            
            -- ‡πÉ‡∏ä‡πâ CFrame ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡∏•‡∏∞‡∏ô‡πâ‡∏≠‡∏¢
            if IsCharacterValid() then
                local currentPos = rootPart.Position
                local direction = (escapePos - currentPos).Unit
                local safeDistance = 3 -- ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡∏•‡∏∞ 3 ‡∏´‡∏ô‡πà‡∏ß‡∏¢
                local newPos = currentPos + (direction * safeDistance)
                newPos = FindGroundPosition(newPos)
                
                -- ‡πÉ‡∏ä‡πâ Tween ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                local tween = TweenService:Create(rootPart, tweenInfo, {CFrame = CFrame.new(newPos)})
                tween:Play()
            end
            stuckDetection.stuckTime = 0
            
            return true
        end
    end
    
    stuckDetection.lastPosition = currentPos
    return false
end

-- ========================================
-- ‡∏£‡∏∞‡∏ö‡∏ö Auto-Recovery
-- ========================================

local function AutoRecovery()
    task.spawn(function()
        while true do
            task.wait(1)
            
            if settings.stuckDetection then
                CheckStuckStatus()
            end
            
            -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Character
            if isEnabled and not IsCharacterValid() then
                print("üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö Character ‡∏´‡∏≤‡∏¢ - ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤")
                moving = false
                
                -- ‡∏£‡∏≠ Character ‡πÉ‡∏´‡∏°‡πà
                repeat task.wait(1) until IsCharacterValid()
                print("‚úÖ Character ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß")
            end
        end
    end)
end

-- ========================================
-- ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
-- ========================================

local function SaveSettings()
    -- ‡πÉ‡∏ô Roblox ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ DataStore ‡πÑ‡∏î‡πâ
    -- ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÉ‡∏ä‡πâ print ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    print("üíæ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:")
    print("Navigation Mode:", navigationMode)
    print("Movement Speed:", movementSpeed)
    print("Custom Targets:", #customTargets)
    for key, value in pairs(settings) do
        print(key .. ":", value)
    end
end

local function LoadDefaultSettings()
    navigationMode = "Hybrid"
    movementSpeed = 20
    -- settings ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô
    print("üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
end

-- ========================================
-- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
-- ========================================

local function Initialize()
    print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Perfect AutoFarm Navigation System...")
    
    -- ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    LoadDefaultSettings()
    
    -- ‡∏™‡∏£‡πâ‡∏≤‡∏á GUI
    CreateAdvancedGUI()
    
    -- ‡∏™‡∏£‡πâ‡∏≤‡∏á Debug GUI
    if settings.showDebugInfo then
        CreateDebugInfo()
    end
    
    -- ‡πÄ‡∏£‡∏¥‡πà‡∏° Auto-Recovery
    AutoRecovery()
    
    -- ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
    print("‚úÖ Perfect AutoFarm Navigation System ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
    print("üéÆ ‡πÉ‡∏ä‡πâ GUI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏ö‡∏ö")
    print("üåü ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©:")
    print("   ‚Ä¢ 3 ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô: CFrame, PathOnly, Hybrid")
    print("   ‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Anti-Cheat ‡πÅ‡∏•‡∏∞ Anti-Noclip")
    print("   ‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Collision ‡πÅ‡∏ö‡∏ö Real-time")
    print("   ‚Ä¢ Humanoid Movement ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
    print("   ‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏Ç‡∏±‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    print("   ‚Ä¢ Path Optimization ‡πÅ‡∏•‡∏∞ Ground Check")
    print("   ‚Ä¢ Debug ‡πÅ‡∏•‡∏∞ Visual Systems")
end

-- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
task.wait(2)
Initialize()
