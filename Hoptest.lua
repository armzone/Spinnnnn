--[[
    Service Definitions
    Initializes required Roblox services for the script to function.
]]
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

--[[
    Configuration Variables
    - placeId: The ID of the current game place.
    - firebaseUrl: The URL to your Firebase Realtime Database.
    - killedByPlayerCount: Counter for how many times the player has been killed by another player.
    - maxPlayerKills: The number of player kills to trigger a server hop.
    - maxPlayersInServer: The maximum number of players allowed before triggering a server hop.
    - checkInterval: How often (in seconds) to check the player count.
]]
local placeId = game.PlaceId
local firebaseUrl = "https://jobid-1e3dc-default-rtdb.asia-southeast1.firebasedatabase.app/roblox_servers.json"
local killedByPlayerCount = 0
local maxPlayerKills = 2
local maxPlayersInServer = 10
local checkInterval = 30
local isTeleporting = false

--[[
    @function getRandomJobId
    @description Fetches server list from Firebase and returns a random JobId from a different server.
    @return (string | nil) A random JobId or nil if fetching fails or no other servers are available.
]]
local function getRandomJobId()
    local success, response = pcall(function()
        return HttpService:JSONDecode(game:HttpGet(firebaseUrl))
    end)

    if success and response then
        local serverList = {}
        for _, serverData in pairs(response) do
            if serverData.id and serverData.id ~= game.JobId then
                table.insert(serverList, serverData.id)
            end
        end
        
        if #serverList > 0 then
            return serverList[math.random(1, #serverList)]
        end
    end

    warn("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JobId ‡∏à‡∏≤‡∏Å Firebase ‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡∏≠‡∏∑‡πà‡∏ô")
    return nil
end

--[[
    @function teleportToNewServer
    @description Initiates teleportation to a new server instance, ensuring it only runs once.
]]
local function teleportToNewServer()
    if isTeleporting then return end -- ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏ó‡πÄ‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
    isTeleporting = true

    local jobId = getRandomJobId()
    if jobId then
        print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡πÄ‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÑ‡∏õ JobId: " .. jobId)
        TeleportService:TeleportToPlaceInstance(placeId, jobId, player)
    else
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡πÄ‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï")
        isTeleporting = false -- ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
    end
end

--[[
    @function setupDeathDetection
    @description Sets up a listener to detect when the local player is killed by another player.
    If the kill count is reached, it triggers an immediate teleport.
]]
local function setupDeathDetection()
    local guiPath = player:WaitForChild("PlayerGui"):WaitForChild("DeathScreen"):WaitForChild("DeathScreenHolder"):WaitForChild("Frame"):WaitForChild("DeathMessage")
    
    local function checkIfKilledByPlayer(text)
        local pattern = "<b><i>" .. player.Name .. "</i></b>"
        return text:find(pattern)
    end

    guiPath:GetPropertyChangedSignal("Text"):Connect(function()
        if isTeleporting then return end -- ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏ó‡πÄ‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠
        
        local newText = guiPath.Text
        print("üîÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á Text! ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà: " .. newText)
        
        if checkIfKilledByPlayer(newText) then
            killedByPlayerCount += 1
            print("üíÄ ‡∏ñ‡∏π‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ü‡πà‡∏≤ (‡∏£‡∏ß‡∏° " .. killedByPlayerCount .. " ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)")

            if killedByPlayerCount >= maxPlayerKills then
                print("‚ö†Ô∏è ‡∏ñ‡∏π‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ü‡πà‡∏≤‡∏Ñ‡∏£‡∏ö " .. maxPlayerKills .. " ‡∏Ñ‡∏£‡∏±‡πâ‡∏á! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡πÄ‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏±‡∏ô‡∏ó‡∏µ...")
                teleportToNewServer()
            end
        else
            print("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô")
        end
    end)
end

--[[
    Script Initialization
    - Spawns the death detection in a new thread.
    - Starts the main loop for checking player count.
]]
task.spawn(setupDeathDetection)
print("‚úÖ ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")

while task.wait(checkInterval) do
    if isTeleporting then 
        break -- ‡∏´‡∏¢‡∏∏‡∏î‡∏•‡∏π‡∏õ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡πÄ‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏à‡∏≤‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏î)
    end
    
    local currentPlayers = #Players:GetPlayers()
    print("üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü: " .. currentPlayers .. "/" .. maxPlayersInServer)

    if currentPlayers > maxPlayersInServer then
        print("‚ö†Ô∏è ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô " .. maxPlayersInServer .. " ‡∏Ñ‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÉ‡∏´‡∏°‡πà...")
        teleportToNewServer()
        break -- ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ó‡πÄ‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï
    else
        print("‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
    end
end
